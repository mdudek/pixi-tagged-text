import { Unary } from "./functionalUtils";
import { Align, Bounds, FinalToken, LineToken, Nested, ParagraphToken, Point, SplitStyle, StyledTokens, VAlign, WordToken } from "./types";
export declare const updateOffsetForNewLine: (offset: Point, largestLineHeight: number, lineSpacing: number) => Point;
export declare const translatePoint: <P extends Point>(offset: Point) => (point: P) => P;
export declare const translateLine: (offset: Point) => (line: Bounds[]) => Bounds[];
export declare const translateWordPosition: (offset: Point) => (word: WordToken) => WordToken;
export declare const translateTokenLine: (offset: Point) => (line: LineToken) => LineToken;
export declare const lineWidth: (wordsInLine: Bounds[]) => number;
export declare const center: (x: number, context: number) => number;
export declare const concatBounds: (originalBounds?: Bounds, bounds?: Bounds) => Bounds;
export declare const getBoundsNested: Unary<Nested<FinalToken>, Bounds>;
export declare const alignLeft: (line: Bounds[]) => Bounds[];
export declare const alignRight: (maxWidth: number) => (line: Bounds[]) => Bounds[];
export declare const alignCenter: (maxWidth: number) => (line: Bounds[]) => Bounds[];
export declare const alignJustify: (maxLineWidth: number) => (line: Bounds[]) => Bounds[];
export declare const alignLines: (align: Align, maxWidth: number, lines: ParagraphToken) => ParagraphToken;
export declare const verticalAlignInLines: (lines: ParagraphToken, lineSpacing: number, overrideValign?: VAlign | undefined) => ParagraphToken;
export declare const collapseWhitespacesOnEndOfLines: (lines: ParagraphToken) => ParagraphToken;
export declare const splitAroundWhitespace: (s: string) => string[];
export declare const splitText: (s: string, splitStyle: SplitStyle) => string[];
export declare const calculateFinalTokens: (styledTokens: StyledTokens, splitStyle?: SplitStyle) => ParagraphToken;
