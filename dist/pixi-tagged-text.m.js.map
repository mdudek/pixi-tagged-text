{"version":3,"file":"pixi-tagged-text.m.js","sources":["../src/functionalUtils.ts","../src/tags.ts","../src/types.ts","../src/stringUtil.ts","../src/pixiUtils.ts","../src/style.ts","../src/layout.ts","../src/TaggedText.ts"],"sourcesContent":["import { Nested } from \"./types\";\n\n/**\n * a -> boolean\n */\ntype Predicate<T extends unknown> = (t: T) => boolean;\n\nexport const combineRecords = <\n  A extends Record<string, unknown>,\n  B extends Record<string, unknown> = A\n>(\n  a: A,\n  b: B\n): A & B => ({\n  ...a,\n  ...b,\n});\n\nexport const first = <T>(a: T[]): T => a[0];\n\n/**\n * Return the last item in a list.\n * List f => f a -> a\n */\nexport const last = <T>(a: T[]): T => a[a.length - 1];\n\nexport const isDefined: Predicate<unknown | undefined> = (a): boolean =>\n  a !== undefined;\n\n/**\n * Predicate p => p -> p\n */\nexport const complement =\n  <T extends unknown>(predicate: Predicate<T>) =>\n  (input: T): boolean =>\n    !predicate(input);\n\n/**\n * List f => string -> f {string: a} -> f a\n */\nexport const pluck =\n  <T extends unknown, U extends unknown>(key: keyof U) =>\n  (objects: U[]): T[] =>\n    (objects as (U & Record<string, T>)[]).map<T>((o) => o[key]);\n\nexport const assoc =\n  <T extends Record<string, U>, U extends unknown>(key: keyof T) =>\n  (value: U) =>\n  (object: T): T => ({\n    ...object,\n    ...{ [key]: value },\n  });\n\nexport const mapProp =\n  <T, U>(k: keyof U) =>\n  (f: (t: T) => T) =>\n  (o: U): U => ({\n    ...o,\n    [k]: f((o as U & Record<string, T>)[k]),\n  });\n\n// export const every = <T>(p: Predicate<T>) => (a: T[]): boolean => a.every(p);\n\nexport const flatReduce =\n  <T, U>(f: (acc: U, t: T) => U, acc: U) =>\n  (nested: Nested<T>): U =>\n    [nested].flat(255).reduce(f, acc);\n\ntype FlatReduceRetrun<T, U> = (nested: Nested<T>) => U;\n\nexport const flatEvery = <T>(p: Predicate<T>): FlatReduceRetrun<T, boolean> =>\n  flatReduce<T, boolean>((acc: boolean, t: T) => acc && p(t), true);\n\nexport const nestedMap =\n  <T, U>(f: (t: T) => U) =>\n  (nested: Nested<T>): Nested<U> =>\n    nested instanceof Array ? nested.map(nestedMap(f)) : f(nested);\n\nexport const countIf =\n  <T>(p: Predicate<T>) =>\n  (a: Array<T>): number =>\n    a.reduce((count, item) => (p(item) ? count + 1 : count), 0);\n\nexport type Unary<Param, Return> = (p: Param) => Return;\n","import getEmojiRegex from \"emoji-regex/es2015/RGI_Emoji\";\n\nimport { last } from \"./functionalUtils\";\nimport {\n  TagMatchData,\n  AttributesList,\n  TagWithAttributes,\n  CompositeToken,\n  TagToken,\n  TextToken,\n  isEmptyObject,\n} from \"./types\";\n\n// TODO: this can probably be just a static value without all the options and parameters.\n// Seems doing one pass will be enough to gather all relevant info.\n// TODO: support self closing tags?\n\n/**\n * Generates a regular expression object for identifying tags and attributes.\n * @param tagNamesToMatch List of tag-names that will be matched by the RegExp\n */\nexport const getTagRegex = (tagNamesToMatch: string[] = [\"\\\\w+\"]): RegExp => {\n  const matchingTagNames = tagNamesToMatch.join(\"|\");\n\n  const captureGroup = (a: string) => `(${a})`;\n  const noCaptureGroup = (a: string) => `(?:${a})`;\n\n  const OR = \"|\";\n  const WHITESPACE = `\\\\s`;\n  const S = WHITESPACE + \"*\";\n  const SS = WHITESPACE + \"+\";\n  const CHAR = \"[A-Za-z0-9_\\\\-]\";\n  const QUOTE = noCaptureGroup(`\"|'`);\n  const NOT_QUOTE = `[^${QUOTE}]`;\n  const TAG_NAMES = captureGroup(matchingTagNames);\n  const ATTRIBUTE_NAME = CHAR + \"+\";\n  const ATTRIBUTE_VALUE = NOT_QUOTE + \"+\";\n\n  const ATTRIBUTES =\n    captureGroup(\n      noCaptureGroup(\n        SS +\n          noCaptureGroup(ATTRIBUTE_NAME) +\n          `=` +\n          QUOTE +\n          noCaptureGroup(ATTRIBUTE_VALUE) +\n          QUOTE\n      ) + \"*\"\n    ) + \"+\";\n  const TAG_OPEN = `<` + TAG_NAMES + ATTRIBUTES + S + `>`;\n  const TAG_CLOSE = `</${TAG_NAMES}${S}>`;\n\n  const pattern = TAG_OPEN + OR + TAG_CLOSE;\n\n  return new RegExp(pattern, \"g\");\n};\n\nexport const EMOJI_TAG = \"__EMOJI__\";\n\n/**\n * Takes a string of attributes and returns an object with key value pairs for each attribute.\n * Converts \"true\" | \"false\" into booleans and number-like strings into numbers.\n * @param attributesString  XML style attributes like \"src='/image.png' alt='foo'\"\n */\nexport const parseAttributes = (attributesString = \"\"): AttributesList => {\n  if (attributesString === \"\") {\n    return {};\n  }\n\n  const attributes = attributesString.trim().split(/\\s+/);\n\n  return attributes.reduce((obj: AttributesList, attribute: string) => {\n    const attributePair = attribute.split(\"=\");\n    const name = attributePair[0].trim();\n    const valueStr: string = attributePair[1]\n      .substr(1, attributePair[1].length - 2)\n      .trim();\n\n    obj[name] = valueStr;\n    return obj;\n  }, {});\n};\n\n/** Converts from RegExpExecArray to TagMatchData */\nexport const createTagMatchData = (match: RegExpExecArray): TagMatchData => {\n  const {\n    0: tag,\n    1: openTagName,\n    2: attributes,\n    3: closeTagName,\n    index,\n  } = match;\n  const tagName = openTagName ?? closeTagName;\n  const isOpening = openTagName !== undefined;\n  return {\n    tag,\n    tagName,\n    isOpening,\n    attributes: parseAttributes(attributes),\n    index,\n  };\n};\n\n/** Converts TagMatchData to TagWithAttributes */\nexport const tagMatchDataToTagWithAttributes = (\n  tag: TagMatchData\n): TagWithAttributes => ({\n  tagName: tag.tagName,\n  attributes: tag.attributes,\n});\n\n/**\n * Splits original text into an untagged list of string segments.\n * @param input Original text input\n * @param tagMatchData Results of regexp exect converted to tag matches.\n */\nexport const extractSegments = (\n  input: string,\n  tagMatchData: TagMatchData[]\n): string[] => {\n  const segments: string[] = [];\n\n  let remaining = input;\n  let offset = 0;\n  let tagMatch: TagMatchData;\n  for (tagMatch of tagMatchData) {\n    if (remaining !== undefined) {\n      const { tag, index } = tagMatch;\n      const startOfTag = index - offset;\n      const endOfTag = startOfTag + tag.length;\n      offset += endOfTag;\n\n      const segment = remaining.substr(0, startOfTag);\n      segments.push(segment);\n\n      remaining = remaining.substr(endOfTag);\n    }\n  }\n  segments.push(remaining);\n\n  return segments;\n};\n\nconst selfClosingTagSearch = (() => {\n  const group = (s: string) => `(${s})`;\n  const any = (s: string) => s + `*`;\n  const not = (...s: string[]) => `[^${s.join(\"\")}]`;\n  const WORD_START = `[A-Za-z_]`;\n  const WORD = `[A-Za-z0-9_]`;\n  const TAG_OPEN = `<`;\n  const TAG_SLASH = `/`;\n  const TAG_CLOSE = `>`;\n  const TAG_SELF_CLOSE = TAG_SLASH + TAG_CLOSE;\n\n  return new RegExp(\n    TAG_OPEN +\n      // tag group\n      group(WORD_START + any(WORD)) +\n      // attribute group\n      group(any(not(TAG_SLASH, TAG_CLOSE))) +\n      TAG_SELF_CLOSE,\n    `gs`\n  );\n})();\n\nexport const wrapEmoji = (input: string): string => {\n  const emojiRegex = new RegExp(\n    `((<|</)[^>]*)?(${getEmojiRegex().source})+`,\n    \"gums\"\n  );\n\n  return input.replaceAll(emojiRegex, (match, tagStart) => {\n    if (tagStart?.length > 0) {\n      // if the emoji is inside a tag, ignore it.\n      return match;\n    }\n    return `<${EMOJI_TAG}>${match}</${EMOJI_TAG}>`;\n  });\n};\n\nexport const replaceSelfClosingTags = (input: string): string =>\n  input.replace(selfClosingTagSearch, (_, tag, attributes = \"\") => {\n    let output = `<${tag}${attributes}></${tag}>`;\n    output = output.replace(/\\s+/g, \" \");\n    output = output.replace(/\\s>/g, \">\");\n    return output;\n  });\n\nexport const removeTags = (input: string): string =>\n  input.replace(getTagRegex(), \"\");\n\n// export const isTextToken = (token: Token): boolean => typeof token === \"string\";\n// export const isNewlineToken = (token: Token): boolean =>\n//   isWhitespaceToken(token) && token === \"\\n\";\n// export const isCompositeToken = (token: Token): boolean =>\n//   isTextToken(token) === false && \"children\" in (token as CompositeToken);\n\n// export const makeSpacesSeparateWords = (segment: string): string[] =>\n//   segment.replace(\" \", \"__SPACE__ __SPACE__\").split(\"__SPACE__\");\n\nexport const tagMatchToTagToken = (tag: TagMatchData): TagToken => {\n  return {\n    tag: tag.tagName,\n    children: [],\n\n    // Add attributes unless undefined\n    ...(isEmptyObject(tag.attributes) ? {} : { attributes: tag.attributes }),\n  };\n};\n\nexport const createTokensNew = (\n  segments: string[],\n  tags: TagMatchData[]\n): (TagToken | TextToken)[] => {\n  const rootTokens: CompositeToken<TagToken | TextToken> = { children: [] };\n  if (segments[0] !== \"\") {\n    rootTokens.children.push(segments[0]);\n  }\n  // Track which tags are opened and closed and add them to the list.\n  const tokenStack: TagToken[] = [rootTokens];\n\n  for (let i = 0; i < tags.length; i++) {\n    const tag = tags[i];\n    const segment = segments[i + 1] ?? \"\";\n    if (tag.isOpening) {\n      const token = tagMatchToTagToken(tag);\n      if (segment !== \"\") {\n        token.children.push(segment);\n      }\n      last(tokenStack).children.push(token);\n      tokenStack.push(token as CompositeToken<TagToken | TextToken>);\n    } else {\n      const poppedToken = tokenStack.pop();\n      if (poppedToken === undefined || poppedToken.tag !== tag.tagName) {\n        throw new Error(\n          `Unexpected tag nesting. Found a closing tag \"${tag.tagName}\" that doesn't match the previously open tag \"${poppedToken?.tag}\"`\n        );\n      }\n      if (segment !== \"\") {\n        last(tokenStack).children.push(segment);\n      }\n    }\n  }\n  if (tokenStack.length > 1) {\n    console.warn(\n      `Found ${tokenStack.length - 1} unclosed tags in\\n${tokenStack\n        .map((token) => token.tag)\n        .join(\"-\")}`\n    );\n  }\n\n  return rootTokens.children;\n};\n\nexport const containsEmoji = (input: string): boolean =>\n  getEmojiRegex().test(input);\n\n/**\n * Converts a string into a list of tokens that match segments of text with styles.\n *\n * @param input Input string with XML-style tags.\n * @param tagNamesToMatch Used to only tokenize tags that have styles defined for them.\n */\nexport const parseTagsNew = (\n  input: string,\n  tagNamesToMatch?: string[],\n  shouldWrapEmoji?: boolean\n): CompositeToken<TagToken | TextToken> => {\n  // TODO: Warn the user if tags were found that are not defined in the tagStyles.\n\n  if (shouldWrapEmoji && containsEmoji(input)) {\n    input = wrapEmoji(input);\n  }\n\n  input = replaceSelfClosingTags(input);\n  const re = getTagRegex(tagNamesToMatch);\n  const matchesRaw: RegExpExecArray[] = [];\n  const tagMatches: TagMatchData[] = [];\n  let match;\n  while ((match = re.exec(input))) {\n    matchesRaw.push(match);\n\n    const tagMatch = createTagMatchData(match);\n    tagMatches.push(tagMatch);\n  }\n\n  const segments = extractSegments(input, tagMatches);\n\n  const tokens = createTokensNew(segments, tagMatches);\n\n  return { children: tokens };\n};\n","import { BaseTexture, Texture } from \"@pixi/core\";\nimport { Rectangle as PixiRectangle } from \"@pixi/math\";\nimport { Sprite } from \"@pixi/sprite\";\nimport { TextStyle as PixiTextStyle } from \"@pixi/text\";\nimport { complement, flatEvery } from \"./functionalUtils\";\n\n///// GENERAL PURPOSE\n\nexport type Point = {\n  x: number;\n  y: number;\n};\nexport type Rectangle = Point & {\n  width: number;\n  height: number;\n};\n\nexport interface IFontMetrics {\n  ascent: number;\n  descent: number;\n  fontSize: number;\n}\n\nexport type Bounds = Rectangle;\n\nexport type Nested<T> = T | Array<Nested<T>>;\n\n///// OPTIONS\n\nexport type SpriteSource =\n  | string\n  | Texture\n  | HTMLCanvasElement\n  | HTMLVideoElement;\n\nexport type TextureSource =\n  | string\n  | HTMLImageElement\n  | HTMLCanvasElement\n  | HTMLVideoElement\n  | BaseTexture;\n\nexport type ImageSource = Sprite | SpriteSource | TextureSource;\n\nexport const isSpriteSource = (s: ImageSource): s is SpriteSource =>\n  typeof s === \"string\" ||\n  s instanceof Texture ||\n  s instanceof HTMLCanvasElement ||\n  s instanceof HTMLVideoElement;\nexport const isTextureSource = (s: ImageSource): s is TextureSource =>\n  s instanceof HTMLImageElement || s instanceof BaseTexture;\n\nexport type ImageSourceMap = Record<string, ImageSource>;\nexport type ImageMap = Record<string, Sprite>;\n\nexport type SplitStyle = \"words\" | \"characters\";\nexport interface TaggedTextOptions {\n  debug?: boolean;\n  debugConsole?: boolean;\n  splitStyle?: SplitStyle;\n  imgMap?: ImageSourceMap;\n  skipUpdates?: boolean;\n  skipDraw?: boolean;\n  drawWhitespace?: boolean;\n  wrapEmoji?: boolean;\n}\n\n///// STYLE PROPERTIES\n\n// PROPERTY NAMES\nexport const IMG_REFERENCE_PROPERTY = \"imgSrc\";\nexport const IMG_DISPLAY_PROPERTY = \"imgDisplay\";\n\n// todo: add text-transform: uppercase\nexport type Thickness = number;\nexport type Color = string | number;\nexport type Fill = Color | string[] | number[] | CanvasGradient | CanvasPattern;\nexport type VAlign = \"top\" | \"middle\" | \"bottom\" | \"baseline\" | number;\nexport type Align = \"left\" | \"right\" | \"center\" | \"justify\";\nexport type ImageDisplayMode = \"icon\" | \"block\" | \"inline\";\nexport type ImageReference = string;\nexport type ImageDimensionPercentage = string;\nexport type ImageDimension = number | string | ImageDimensionPercentage;\nexport type TextTransform = \"normal\" | \"capitalize\" | \"uppercase\" | \"lowercase\";\nexport type FontStyle = \"normal\" | \"italic\" | \"oblique\";\nexport type TextDecorationValue = \"underline\" | \"overline\" | \"line-through\";\nexport type TextDecoration =\n  | \"normal\"\n  | TextDecorationValue\n  | `${TextDecorationValue} ${TextDecorationValue}`\n  | `${TextDecorationValue} ${TextDecorationValue} ${TextDecorationValue}`;\n\nexport interface TextStyle\n  extends Record<string, unknown>,\n    Partial<PixiTextStyle> {\n  align?: Align;\n  fontStyle?: FontStyle;\n}\n\nexport interface ImageStyles {\n  [IMG_REFERENCE_PROPERTY]?: ImageReference;\n  [IMG_DISPLAY_PROPERTY]?: ImageDisplayMode;\n  imgScale?: ImageDimensionPercentage;\n  imgScaleX?: ImageDimensionPercentage;\n  imgScaleY?: ImageDimensionPercentage;\n  imgWidth?: ImageDimension;\n  imgHeight?: ImageDimension;\n}\n\nexport interface UnderlineStyle {\n  underlineColor?: Color;\n  underlineThickness?: Thickness;\n  underlineOffset?: number;\n}\nexport interface OverlineStyle {\n  overlineColor?: Color;\n  overlineThickness?: Thickness;\n  overlineOffset?: number;\n}\nexport interface LineThroughStyle {\n  lineThroughColor?: Color;\n  lineThroughThickness?: Thickness;\n  lineThroughOffset?: number;\n}\n\nexport interface TextDecorationStyles\n  extends UnderlineStyle,\n    OverlineStyle,\n    LineThroughStyle {}\nexport interface TextStyleExtended\n  extends TextStyle,\n    ImageStyles,\n    TextDecorationStyles {\n  lineSpacing?: number;\n  valign?: VAlign;\n  textTransform?: TextTransform;\n  textDecoration?: TextDecoration;\n  fontScaleWidth?: number;\n  fontScaleHeight?: number;\n}\n\nexport interface TextDecorationMetrics {\n  color: Color;\n  bounds: Bounds;\n}\n\nexport type TextStyleSet = Record<string, TextStyleExtended>;\n\n///// TAG PARSING\n\ntype TagName = string;\ntype AttributeName = string;\ntype AttributeValue = string | number;\nexport type AttributesList = Record<AttributeName, AttributeValue>;\nexport interface TagWithAttributes {\n  tagName: string;\n  attributes: AttributesList;\n}\n\nexport interface TagMatchData extends TagWithAttributes {\n  tag: string;\n  isOpening: boolean;\n  index: number;\n}\nexport type TagStack = TagMatchData[];\n\n///// PARSED TOKENS\n\nexport type NewlineToken = \"\\n\";\nexport type WhitespaceToken = \" \" | \"\\t\" | NewlineToken;\nexport type TextToken = string;\nexport type SpriteToken = Sprite;\n\nexport interface CompositeToken<T extends Token = Token> {\n  children: T[];\n}\n\nexport type Token = TextToken | CompositeToken | SpriteToken;\nexport type Tokens = CompositeToken;\n\nexport interface TagToken extends CompositeToken<TagToken | TextToken> {\n  tag?: TagName;\n  attributes?: AttributesList;\n}\nexport type TagTokens = TagToken;\n\nexport interface StyledToken\n  extends CompositeToken<StyledToken | TextToken | SpriteToken> {\n  style: TextStyleExtended;\n  tags: string;\n}\n\nexport type StyledTokens = StyledToken;\nexport interface FinalToken {\n  content: TextToken | SpriteToken;\n  bounds: Rectangle;\n  fontProperties: IFontMetrics;\n  style: TextStyleExtended;\n  tags: string;\n  textDecorations?: TextDecorationMetrics[];\n}\n\nexport const createEmptyFinalToken = (): FinalToken => ({\n  content: \"\",\n  bounds: new PixiRectangle(),\n  fontProperties: { ascent: 0, descent: 0, fontSize: 0 },\n  style: {},\n  tags: \"\",\n  textDecorations: [],\n});\n\nexport type WordToken = FinalToken[];\nexport type LineToken = WordToken[];\nexport type ParagraphToken = LineToken[];\n\nexport interface SpriteFinalToken extends FinalToken {\n  content: SpriteToken;\n}\nexport interface TextFinalToken extends FinalToken {\n  content: TextToken;\n}\n\nexport interface WhitespaceFinalToken extends TextFinalToken {\n  content: WhitespaceToken;\n}\nexport interface NewlineFinalToken extends TextFinalToken {\n  content: NewlineToken;\n}\n\nexport const isWhitespace = (s: string): s is WhitespaceToken =>\n  s !== \"\" &&\n  s.split(\"\").every((char: string): boolean => char.search(/\\s/) === 0);\nexport const isNewline = (s: string): s is NewlineToken =>\n  isWhitespace(s) && s === \"\\n\";\n\nexport const _isSpriteToken = (t: FinalToken): t is SpriteFinalToken =>\n  t.content instanceof Sprite;\nexport const isSpriteToken = flatEvery(_isSpriteToken);\n\nexport const _isTextToken = (t: FinalToken): t is TextFinalToken =>\n  typeof t.content === \"string\";\nexport const isTextToken = flatEvery(_isTextToken);\n\nexport const _isWhitespaceToken = (t: FinalToken): t is WhitespaceFinalToken =>\n  t !== undefined && _isTextToken(t) && isWhitespace(t.content);\nexport const isWhitespaceToken = flatEvery(_isWhitespaceToken);\n\nexport const _isNewlineToken = (t: FinalToken): t is NewlineFinalToken =>\n  t !== undefined && _isTextToken(t) && isNewline(t.content);\nexport const isNewlineToken = (t?: Nested<FinalToken>): boolean =>\n  t === undefined ? false : flatEvery(_isNewlineToken)(t);\n\nexport const isNotWhitespaceToken = complement(isWhitespaceToken);\n\nexport const isEmptyObject = <T extends unknown>(a: T): boolean =>\n  a instanceof Object && Object.keys(a).length === 0;\n","// modified from: https://github.com/h26k2/capitalize-text/blob/master/index.js\nexport const capitalize = (str: string): string => {\n  const chars = str.split(\" \");\n  let converted = ``;\n\n  for (let i = 0; i < chars.length; i++) {\n    converted += `${chars[i].charAt(0).toUpperCase()}${chars[i].substr(1)} `;\n  }\n\n  return converted.trim();\n};\n","import { Container, DisplayObject } from \"@pixi/display\";\nimport { Sprite } from \"@pixi/sprite\";\nimport { Text, TextMetrics } from \"@pixi/text\";\nimport { IFontMetrics } from \"./types\";\n\nconst PX_PER_EM = 16;\nconst PX_PER_PERCENT = 16 / 100;\nconst PX_PER_PT = 1.3281472327365;\n\nexport const measureFont = (context: CanvasRenderingContext2D): IFontMetrics =>\n  TextMetrics.measureFont(context.font);\n\nexport const INITIAL_FONT_PROPS: IFontMetrics = {\n  ascent: 10,\n  descent: 2,\n  fontSize: 12,\n};\n\n// TODO: Memoize\nexport const getFontPropertiesOfText = (\n  textField: Text,\n  forceUpdate = false\n): IFontMetrics => {\n  if (forceUpdate) {\n    textField.updateText(false);\n    return measureFont(textField.context);\n  } else {\n    const props = measureFont(textField.context);\n    if (\n      props.ascent === INITIAL_FONT_PROPS.ascent &&\n      props.descent === INITIAL_FONT_PROPS.descent &&\n      (!textField.style.fontSize ||\n        textField.style.fontSize > INITIAL_FONT_PROPS.fontSize ||\n        isNaN(textField.style.fontSize as number))\n    ) {\n      throw new Error(\n        \"getFontPropertiesOfText() returned metrics associated with a Text field that has not been updated yet. Please try using the forceUpdate parameter when you call this function.\"\n      );\n    }\n    return measureFont(textField.context);\n  }\n};\n\nexport const checkPixiVersion = (\n  version: string,\n  expectedMajorVersion: number\n): number => {\n  const majorVersion = parseInt(version.split(\".\")[0], 10);\n  if (majorVersion !== expectedMajorVersion) {\n    throw new Error(\n      `Detected Pixi.js version ${version}. pixi-multistyle-text supports Pixi.js version ${expectedMajorVersion}. (Please use v0.8.0 of this package for Pixi 4 support.)`\n    );\n  }\n  return 0;\n};\n\nexport const addChildrenToContainer = (\n  children: DisplayObject[],\n  container: Container\n): void => children.forEach((child) => container.addChild(child));\n\nexport const cloneSprite = (sprite: Sprite): Sprite =>\n  new Sprite(sprite.texture);\n\nexport const fontSizeStringToNumber = (size: string): number => {\n  const [valueString, unit] = size.split(/(%|pt|px|r?em)/);\n  const value = parseFloat(valueString);\n\n  if (isNaN(value)) {\n    NaN;\n  }\n\n  switch (unit) {\n    case \"%\":\n      return value * PX_PER_PERCENT;\n    case \"em\":\n    case \"rem\":\n      return value * PX_PER_EM;\n    case \"pt\":\n      return value * PX_PER_PT;\n    case \"px\":\n    default:\n      // keep as is.\n      return value;\n  }\n};\n","import { Sprite } from \"@pixi/sprite\";\nimport { combineRecords, isDefined, pluck } from \"./functionalUtils\";\nimport {\n  AttributesList,\n  TagWithAttributes,\n  TextStyleExtended,\n  TextStyleSet,\n  IMG_REFERENCE_PROPERTY,\n  IMG_DISPLAY_PROPERTY,\n  ImageMap,\n  TextToken,\n  TagToken,\n  TagTokens,\n  StyledTokens,\n  StyledToken,\n  SpriteToken,\n  isEmptyObject,\n  TextDecorationValue,\n  Bounds,\n  TextDecorationMetrics,\n  Thickness,\n  Color,\n  IFontMetrics,\n} from \"./types\";\nimport { cloneSprite } from \"./pixiUtils\";\n\nexport const DEFAULT_STYLE: TextStyleExtended = {\n  align: \"left\",\n  valign: \"baseline\",\n  [IMG_DISPLAY_PROPERTY]: \"inline\",\n  wordWrap: true,\n  wordWrapWidth: 500,\n  lineSpacing: 0,\n  fill: 0x000000,\n};\n\n/**\n * Combine 2 styles into one.\n */\nexport const combineStyles: (\n  a: TextStyleExtended,\n  b: TextStyleExtended\n) => TextStyleExtended = combineRecords;\n\n/**\n * Combines multiple styles into one.\n * @param styles List of styles to combine.\n */\nexport const combineAllStyles = (\n  styles: (TextStyleExtended | undefined)[]\n): TextStyleExtended =>\n  (styles.filter(isDefined) as TextStyleExtended[]).reduce(combineStyles, {});\n\nexport const convertAttributeValues = (\n  attributes: AttributesList\n): AttributesList => {\n  const convertedAttributes: AttributesList = {};\n  for (const key in attributes) {\n    const value = attributes[key] as string;\n    if (isNaN(parseFloat(value)) === false) {\n      convertedAttributes[key] = parseFloat(value);\n    } else {\n      convertedAttributes[key] = value;\n    }\n  }\n  return convertedAttributes;\n};\n\n/**\n * Replaces properties of a TextStyle object with new values.\n * (Since AttributeLists are basically partially defined styles, this is the same as combineStyles)\n * @param attributes List of attributes to overwrite in the target style.\n * @param style The style to modify.\n */\nexport const injectAttributes = (\n  attributes: AttributesList = {},\n  style: TextStyleExtended = {}\n): TextStyleExtended | undefined => {\n  if (isEmptyObject(style) && isEmptyObject(attributes)) return undefined;\n  return combineRecords(style, convertAttributeValues(attributes));\n};\n\n/**\n * Looks up a tag in a list of tag styles (with optional attributes) and returns it.\n * @param tagName Tag name to check.\n * @param tagStyles Set of tag styles to search.\n * @param attributes Attributes to inject into the style (optional).\n */\nexport const getStyleForTag = (\n  tagName: string,\n  tagStyles: TextStyleSet,\n  attributes: AttributesList = {}\n): TextStyleExtended | undefined => {\n  const style = injectAttributes(attributes, tagStyles[tagName]);\n  if (style == {}) return undefined;\n  return style;\n};\n\n/**\n * Converts TagWithAttributes into a style object.\n * @param param0 A TagWithAttributes object that has a tag name matched with any optional attributes.\n * @param tagStyles Set of tag styles to search.\n */\nexport const tagWithAttributesToStyle = (\n  { tagName, attributes }: TagWithAttributes,\n  tagStyles: TextStyleSet\n): TextStyleExtended =>\n  getStyleForTag(tagName, tagStyles, attributes) as TextStyleExtended;\n\n/**\n * Gets styles for several tags and returns a single combined style object.\n * Results are cached for future requests.\n * @param tags Tags (with attribues) to look up.\n * @param tagStyles Set of tag styles to search.\n * @param styleCache An object that holds the cached values for the combined styles.\n * @returns\n */\nexport const getStyleForTags = (\n  tags: TagWithAttributes[],\n  tagStyles: TextStyleSet,\n  styleCache: TextStyleSet\n): TextStyleExtended => {\n  const tagHash = JSON.stringify(tags);\n  if (styleCache[tagHash] === undefined) {\n    const defaultStyle = tagStyles.default;\n    const styles = tags.map((tag) => tagWithAttributesToStyle(tag, tagStyles));\n    const stylesWithDefault = [defaultStyle, ...styles];\n    styleCache[tagHash] = combineAllStyles(stylesWithDefault);\n  }\n  return styleCache[tagHash];\n};\n\nexport const mapTagsToStyles = (\n  tokens: TagTokens,\n  styles: TextStyleSet,\n  spriteTemplates?: ImageMap\n): StyledTokens => {\n  const defaultStyle: TextStyleExtended = styles.default ?? {};\n  const tagStack: TagWithAttributes[] = [];\n  const styleCache = {};\n\n  const convertTagTokenToStyledToken = (\n    token: TagToken | TextToken\n  ): StyledToken | TextToken => {\n    if (typeof token === \"string\") {\n      return token as TextToken;\n    }\n\n    const { tag, attributes = {} } = token;\n    let style: TextStyleExtended = defaultStyle;\n    let tags = \"\";\n\n    if (tag) {\n      // Put the current tag on the stack.\n      tagStack.push({ tagName: tag, attributes });\n      // Get tag names as comma separates string\n      tags = pluck(\"tagName\")(tagStack).join(\",\");\n      // Merge all tags into a style object.\n      style = getStyleForTags(tagStack, styles, styleCache);\n      style = convertDecorationToLineProps(style);\n    }\n\n    const styledToken: StyledToken = {\n      style,\n      tags,\n      children: token.children.map(convertTagTokenToStyledToken),\n    };\n\n    // If a matching sprite exits in the imgMap...\n    const imgKey = style[IMG_REFERENCE_PROPERTY] ?? \"\";\n    if (imgKey) {\n      if (spriteTemplates === undefined) {\n        throw new Error(\n          `An image tag with ${IMG_REFERENCE_PROPERTY}=\"${imgKey}\" was encountered, but no imgMap was provided. Please include a valid Sprite in the imgMap property in the options in your TaggedText constructor.`\n        );\n      }\n      const sprite: SpriteToken | undefined = spriteTemplates[imgKey];\n      if (sprite === undefined) {\n        throw new Error(\n          `An image tag with ${IMG_REFERENCE_PROPERTY}=\"${imgKey}\" was encountered, but there was no matching sprite in the sprite map. Please include a valid Sprite in the imgMap property in the options in your TaggedText constructor.`\n        );\n      }\n      if (sprite instanceof Sprite === false) {\n        throw new Error(\n          `The image reference you provided for \"${imgKey}\" is not a Sprite. The imgMap can only accept PIXI.Sprite instances.`\n        );\n      }\n\n      // insert sprite as first token.\n      const cloneOfSprite = cloneSprite(sprite);\n      styledToken.children = [cloneOfSprite, ...styledToken.children];\n    }\n\n    // Remove the last tag from the stack\n    tagStack.pop();\n\n    return styledToken;\n  };\n\n  return convertTagTokenToStyledToken(tokens) as StyledTokens;\n};\n\nexport const convertDecorationToLineProps = (\n  style: TextStyleExtended\n): TextStyleExtended => {\n  const { textDecoration } = style;\n\n  if (textDecoration === undefined || textDecoration === \"normal\") {\n    return style;\n  }\n\n  const { decorationColor, decorationThickness } = style;\n  const defaultColor = decorationColor || style.fill || DEFAULT_STYLE.fill;\n  const defaultThickness = decorationThickness || 1;\n  const defaultOffset = 0;\n\n  function mergeDecoration(\n    decorationLineType: TextDecorationValue,\n    decorationLineTypeCamelCase: string = decorationLineType\n  ): Partial<TextStyleExtended> {\n    if (style.textDecoration?.includes(decorationLineType)) {\n      return {\n        [`${decorationLineTypeCamelCase}Color`]:\n          style[`${decorationLineTypeCamelCase}Color`] ?? defaultColor,\n        [`${decorationLineTypeCamelCase}Thickness`]:\n          style[`${decorationLineTypeCamelCase}Thickness`] ?? defaultThickness,\n        [`${decorationLineTypeCamelCase}Offset`]:\n          style[`${decorationLineTypeCamelCase}Offset`] ?? defaultOffset,\n      };\n    }\n    return {};\n  }\n\n  return {\n    ...style,\n    ...mergeDecoration(\"underline\"),\n    ...mergeDecoration(\"overline\"),\n    ...mergeDecoration(\"line-through\", \"lineThrough\"),\n  };\n};\n\nexport const extractDecorations = (\n  style: TextStyleExtended,\n  textBounds: Bounds,\n  fontProperties: IFontMetrics\n): TextDecorationMetrics[] => {\n  const { ascent, descent } = fontProperties;\n  const baseline = ascent;\n  const ascender = descent;\n  const xHeight = baseline - ascender;\n  const { width } = textBounds;\n  const x = 0;\n\n  function styleToMetrics(key: string): TextDecorationMetrics | undefined {\n    const color = style[`${key}Color`] as Color;\n    const height = style[`${key}Thickness`] as Thickness;\n    const offset = (style[`${key}Offset`] as number) ?? 0;\n\n    if (color === undefined || height === undefined) {\n      return undefined;\n    }\n\n    let y = offset;\n    if (key === \"underline\") {\n      // position underline below baseline\n      y += baseline + descent / 2;\n    } else if (key === \"lineThrough\") {\n      // position lineThrough in center of ascent\n      y += ascender + xHeight / 2;\n    }\n    // else, position overline at top of text\n\n    return {\n      color,\n      bounds: { x, y, width, height },\n    };\n  }\n\n  const keySuffices = [\"underline\", \"overline\", \"lineThrough\"];\n  const metrics = keySuffices\n    .map(styleToMetrics)\n    .filter((x) => x !== undefined) as TextDecorationMetrics[];\n  return metrics;\n};\n","import { Container } from \"@pixi/display\";\nimport { Point as PixiPoint, Rectangle } from \"@pixi/math\";\nimport { Sprite } from \"@pixi/sprite\";\nimport { Text as PixiText } from \"@pixi/text\";\nimport {\n  assoc,\n  first,\n  flatReduce,\n  last,\n  mapProp,\n  Unary,\n} from \"./functionalUtils\";\nimport { getFontPropertiesOfText } from \"./pixiUtils\";\nimport { capitalize } from \"./stringUtil\";\nimport { extractDecorations } from \"./style\";\nimport {\n  Align,\n  Bounds,\n  createEmptyFinalToken,\n  FinalToken,\n  IFontMetrics,\n  IMG_DISPLAY_PROPERTY,\n  isNewlineToken,\n  isNotWhitespaceToken,\n  isSpriteToken,\n  isWhitespaceToken,\n  LineToken,\n  Nested,\n  ParagraphToken,\n  Point,\n  SplitStyle,\n  SpriteToken,\n  StyledToken,\n  StyledTokens,\n  TextStyleExtended,\n  TextToken,\n  VAlign,\n  WordToken,\n} from \"./types\";\n\nconst ICON_SCALE_BASE = 0.8;\n\n/**\n * Translates the current location point to the beginning of the next line.\n *\n * @param offset An offset coordinate. The function will make a clone of this with new coordinates.\n * @param largestLineHeight The largest height in the line of text.\n * @param lineSpacing The amount of extra space to insert between each line.\n */\nexport const updateOffsetForNewLine = (\n  offset: Point,\n  largestLineHeight: number,\n  lineSpacing: number\n): Point => new PixiPoint(0, offset.y + largestLineHeight + lineSpacing);\n\nconst rectFromContainer = (\n  container: Container,\n  offset: Point = { x: 0, y: 0 }\n): Bounds => {\n  const w = container.width;\n  const h = container.height;\n  const x = offset.x + container.x;\n  const y = offset.y + container.y;\n\n  return new Rectangle(x, y, w, h);\n};\n\n/**\n * Move a point by an offset.\n * Point p => p -> p-> -> p\n * @param offset Amount to translate the target.\n * @param point Target to translate.\n */\nexport const translatePoint =\n  <P extends Point>(offset: Point) =>\n  (point: P): P => ({\n    ...point,\n    x: point.x + offset.x,\n    y: point.y + offset.y,\n  });\n\n/**\n * Same as translatePoint but for all the points in an array.\n */\nexport const translateLine =\n  (offset: Point) =>\n  (line: Bounds[]): Bounds[] =>\n    line.map(translatePoint(offset));\n\nexport const translateWordPosition =\n  (offset: Point) =>\n  (word: WordToken): WordToken =>\n    word.map((token) =>\n      mapProp<Bounds, FinalToken>(\"bounds\")(translatePoint(offset))(token)\n    );\n\nexport const translateTokenLine =\n  (offset: Point) =>\n  (line: LineToken): LineToken =>\n    line.map(translateWordPosition(offset));\n\nexport const lineWidth = (wordsInLine: Bounds[]): number => {\n  const firstWord = first(wordsInLine);\n  const lastWord = last(wordsInLine);\n\n  if (firstWord === undefined) {\n    return 0;\n  }\n  if (lastWord === firstWord) {\n    return firstWord.width;\n  }\n  return lastWord.x + lastWord.width - firstWord.x;\n};\n\nexport const center = (x: number, context: number): number => (context - x) / 2;\n\nconst setBoundsX = assoc<Bounds, number>(\"x\");\n\nconst positionWordX =\n  (x: number) =>\n  (word: WordToken): WordToken => {\n    let prevBounds: Bounds;\n    return word.map((token) => {\n      if (prevBounds === undefined) {\n        token.bounds.x = x;\n        prevBounds = token.bounds;\n      } else {\n        token.bounds.x = prevBounds.x + prevBounds.width;\n        prevBounds = token.bounds;\n      }\n      return token;\n    });\n  };\n\nexport const concatBounds = (\n  originalBounds: Bounds = { x: NaN, y: NaN, width: NaN, height: NaN },\n  bounds: Bounds = { x: NaN, y: NaN, width: NaN, height: NaN }\n): Bounds => {\n  if (isNaN(originalBounds.x)) {\n    return bounds;\n  }\n\n  const x = Math.min(originalBounds.x, bounds.x);\n  const y = Math.min(originalBounds.y, bounds.y);\n  const right = Math.max(\n    originalBounds.x + originalBounds.width,\n    bounds.x + bounds.width\n  );\n  const bottom = Math.max(\n    originalBounds.y + originalBounds.height,\n    bounds.y + bounds.height\n  );\n  const width = right - x;\n  const height = bottom - y;\n\n  return { x, y, width, height };\n};\n\nconst getCombinedBounds = (bounds: Bounds[]): Bounds =>\n  bounds.reduce(concatBounds);\n\nexport const getBoundsNested: Unary<Nested<FinalToken>, Bounds> = flatReduce<\n  FinalToken,\n  Bounds\n>((acc: Bounds, t: FinalToken) => concatBounds(acc, t.bounds), {\n  x: NaN,\n  y: NaN,\n  width: NaN,\n  height: NaN,\n});\n\nexport const alignLeft = (line: Bounds[]): Bounds[] =>\n  line.reduce(\n    (newLine: Bounds[], bounds: Bounds, i: number): Bounds[] =>\n      // is first word?\n      i === 0\n        ? [setBoundsX(0)(bounds)]\n        : newLine.concat([\n            setBoundsX(newLine[i - 1].x + newLine[i - 1].width)(bounds),\n          ]),\n    []\n  );\n\nexport const alignRight =\n  (maxWidth: number) =>\n  (line: Bounds[]): Bounds[] =>\n    translateLine({\n      x: maxWidth - lineWidth(line),\n      y: 0,\n    })(alignLeft(line));\n\nexport const alignCenter =\n  (maxWidth: number) =>\n  (line: Bounds[]): Bounds[] =>\n    translateLine({ x: center(lineWidth(line), maxWidth), y: 0 })(\n      alignLeft(line)\n    );\n\nexport const alignJustify =\n  (maxLineWidth: number) =>\n  (line: Bounds[]): Bounds[] => {\n    const count = line.length;\n    if (count === 0) {\n      return [];\n    }\n\n    const nonZeroWidthWords: Bounds[] = line.filter(({ width }) => width > 0);\n    const countNonZeroWidthWords = nonZeroWidthWords.length;\n\n    if (countNonZeroWidthWords === 1) {\n      const [first, ...rest] = line;\n      first.x = 0;\n      return [first, ...rest];\n    }\n\n    const result: Bounds[] = [];\n    const combinedBounds = getCombinedBounds(nonZeroWidthWords);\n    const w = combinedBounds.width;\n    const totalSpace = maxLineWidth - w;\n    const spacerWidth = totalSpace / (countNonZeroWidthWords - 1);\n\n    let previousWord;\n    for (let i = 0; i < line.length; i++) {\n      const bounds = line[i];\n      if (bounds.width === 0) {\n        result[i] = { ...bounds };\n        continue;\n      }\n      let x;\n      if (previousWord === undefined) {\n        x = 0;\n      } else {\n        x = previousWord.x + previousWord.width + spacerWidth;\n      }\n      if (isNaN(x)) {\n        throw new Error(\n          `Something went wrong with the justified layout calculation. x is NaN.`\n        );\n      }\n      const newWord: Bounds = setBoundsX(x)(bounds);\n      previousWord = newWord;\n      result[i] = newWord;\n    }\n    return result;\n  };\n\nexport const alignLines = (\n  align: Align,\n  maxWidth: number,\n  lines: ParagraphToken\n): ParagraphToken => {\n  // do horizontal alignment.\n  let alignFunction: (l: Bounds[]) => Bounds[];\n  switch (align) {\n    case \"left\":\n      alignFunction = alignLeft;\n      break;\n    case \"right\":\n      alignFunction = alignRight(maxWidth);\n      break;\n    case \"center\":\n      alignFunction = alignCenter(maxWidth);\n      break;\n    case \"justify\":\n      alignFunction = alignJustify(maxWidth);\n      break;\n    default:\n      throw new Error(\n        `Unsupported alignment type ${align}! Use one of : \"left\", \"right\", \"center\", \"justify\"`\n      );\n  }\n\n  for (const line of lines) {\n    const wordBoundsForLine: Bounds[] = [];\n    for (const word of line) {\n      const wordBounds = getBoundsNested(word);\n      wordBoundsForLine.push(wordBounds);\n      if (isNaN(wordBounds.x)) {\n        throw new Error(\"wordBounds not correct\");\n      }\n    }\n    const alignedLine = alignFunction(wordBoundsForLine);\n    for (let i = 0; i < line.length; i++) {\n      const bounds = alignedLine[i];\n      const word = line[i];\n      line[i] = positionWordX(bounds.x)(word);\n    }\n  }\n  return lines;\n};\n\nconst getTallestToken = (line: LineToken): FinalToken =>\n  flatReduce<FinalToken, FinalToken>((tallest, current) => {\n    let h = current.bounds.height ?? 0;\n    if (isSpriteToken(current)) {\n      h += current.fontProperties.descent;\n    }\n    if (h > (tallest?.bounds.height ?? 0)) {\n      return current;\n    }\n    return tallest;\n  }, createEmptyFinalToken())(line);\n\n/**\n * @param If you want to override the valign from the styles object, set it here.\n */\nexport const verticalAlignInLines = (\n  lines: ParagraphToken,\n  lineSpacing: number,\n  overrideValign?: VAlign\n): ParagraphToken => {\n  let previousTallestToken: FinalToken = createEmptyFinalToken();\n\n  let previousLineBottom = 0;\n  const newLines: ParagraphToken = [];\n\n  for (const line of lines) {\n    const newLine: LineToken = [];\n    // const nonZeroWidthWords: Bounds[] = line.filter(({ width }) => width > 0);\n\n    let tallestToken: FinalToken = getTallestToken(line);\n    let tallestHeight = tallestToken.bounds?.height ?? 0;\n    let tallestAscent = tallestToken.fontProperties?.ascent ?? 0;\n    if (isSpriteToken(tallestToken)) {\n      tallestHeight += tallestToken.fontProperties.descent;\n      tallestAscent = tallestToken.bounds.height;\n    }\n\n    // const previousTallestHeight = previousTallestToken.bounds.height;\n\n    // if (line.length === 1 && isWhitespaceToken(line[0])) {\n    //   tallestHeight = previousTallestHeight;\n    // }\n\n    if (tallestHeight === 0) {\n      tallestToken = previousTallestToken;\n    } else {\n      previousTallestToken = tallestToken;\n    }\n\n    for (const word of line) {\n      const newWord: WordToken = [];\n      for (const segment of word) {\n        if (isNewlineToken(segment)) {\n          const newToken = {\n            ...segment,\n          };\n          newWord.push(newToken);\n          continue;\n        }\n        const { bounds, fontProperties, style } = segment;\n        const height = bounds.height;\n\n        const newBounds: Bounds = { ...bounds };\n        const valign = overrideValign ?? style.valign;\n\n        let { ascent } = fontProperties;\n        if (isSpriteToken(segment)) {\n          ascent = segment.bounds.height;\n        }\n\n        let newY = 0;\n        switch (valign) {\n          case \"bottom\":\n            newY = previousLineBottom + tallestHeight - height;\n            break;\n          case \"middle\":\n            newY = previousLineBottom + (tallestHeight - height) / 2;\n            break;\n          case \"top\":\n            newY = previousLineBottom;\n            break;\n          case \"baseline\":\n          default:\n            newY = previousLineBottom + tallestAscent - ascent;\n        }\n\n        newBounds.y = newY;\n\n        const newToken = {\n          ...segment,\n          bounds: newBounds,\n        };\n        newWord.push(newToken);\n      }\n      newLine.push(newWord);\n    }\n\n    previousLineBottom += tallestHeight + lineSpacing;\n    newLines.push(newLine);\n  }\n\n  return newLines;\n\n  // ? lines.map(valignTop)\n  //   : valign === \"middle\"\n  //   ? lines.map(valignMiddle)\n  //   : valign === \"bottom\"\n  //   ? lines.map(valignBottom)\n  //   : lines;\n};\n\nexport const collapseWhitespacesOnEndOfLines = (\n  lines: ParagraphToken\n): ParagraphToken => {\n  for (const line of lines) {\n    const l = line.length;\n    let i = l;\n    while (i >= 0) {\n      i -= 1;\n      const word = line[i];\n      if (isNotWhitespaceToken(word)) {\n        break;\n      } else {\n        for (const token of word) {\n          token.bounds.width = 0;\n          token.bounds.height = Math.min(\n            token.bounds.height,\n            token.fontProperties.fontSize\n          );\n        }\n      }\n    }\n  }\n  return lines;\n};\n\nconst layout = (\n  tokens: FinalToken[],\n  maxWidth: number,\n  lineSpacing: number,\n  align: Align\n): ParagraphToken => {\n  const cursor = { x: 0, y: 0 };\n  let wordWidth = 0;\n  let word: WordToken = [];\n  let line: LineToken = [];\n  const allLines: ParagraphToken = [];\n  let tallestHeightInLine = 0;\n\n  function addWordBufferToLineBuffer() {\n    if (word !== undefined && word.length > 0) {\n      // add word to line\n      line.push(word);\n    }\n\n    // reset word buffer\n    word = [];\n    wordWidth = 0;\n  }\n\n  function addLineToListOfLines() {\n    allLines.push(line);\n    line = [];\n  }\n\n  function addLineToListOfLinesAndMoveCursorToNextLine(token: FinalToken) {\n    // finalize Line\n    addLineToListOfLines();\n\n    // move cursor to next line\n    cursor.x = 0;\n    cursor.y = cursor.y + tallestHeightInLine;\n\n    // reset tallestHeight\n    tallestHeightInLine = 0;\n    setTallestHeight(token);\n  }\n\n  function setTallestHeight(token?: FinalToken): void {\n    const fontSize = token?.fontProperties?.fontSize ?? 0;\n    const height = token?.bounds?.height ?? 0;\n\n    tallestHeightInLine = Math.max(tallestHeightInLine, fontSize, lineSpacing);\n    // Don't try to measure the height of newline tokens\n    if (isNewlineToken(token) === false) {\n      tallestHeightInLine = Math.max(tallestHeightInLine, height);\n    }\n  }\n\n  function positionTokenAtCursorAndAdvanceCursor(token: FinalToken): void {\n    // position token at cursor\n    setTallestHeight(token);\n    token.bounds.x = cursor.x;\n    token.bounds.y = cursor.y;\n    // advance cursor\n    cursor.x += token.bounds.width;\n  }\n\n  function positionWordBufferAtCursorAndAdvanceCursor(): void {\n    word.forEach(positionTokenAtCursorAndAdvanceCursor);\n  }\n\n  function wordInBufferExceedsLineLength(): boolean {\n    return cursor.x + wordWidth > maxWidth;\n  }\n\n  function isBlockImage(token: FinalToken): boolean {\n    return token.style[IMG_DISPLAY_PROPERTY] === \"block\";\n  }\n\n  function addTokenToWordAndUpdateWordWidth(token: FinalToken): void {\n    // add the token to the current word buffer.\n    word.push(token);\n    wordWidth += token.bounds.width;\n  }\n\n  let token;\n  for (let i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n    const isWhitespace = isWhitespaceToken(token);\n    const isNewline = isNewlineToken(token);\n    const isImage = isSpriteToken(token);\n    const isWordEndingToken = isWhitespace || isImage;\n\n    if (isWordEndingToken) {\n      positionWordBufferAtCursorAndAdvanceCursor();\n      addWordBufferToLineBuffer();\n    }\n\n    addTokenToWordAndUpdateWordWidth(token);\n    setTallestHeight(token);\n\n    // always immediately add whitespace to the line.\n    if (isWhitespace) {\n      positionWordBufferAtCursorAndAdvanceCursor();\n      addWordBufferToLineBuffer();\n    }\n\n    // If the token is a newline character,\n    // move the cursor to next line immediately\n    if (isNewline || isBlockImage(token)) {\n      addLineToListOfLinesAndMoveCursorToNextLine(token);\n    } else if (wordInBufferExceedsLineLength()) {\n      // don't wrap if it's the first word in the line.\n      if (line.length > 0) {\n        addLineToListOfLinesAndMoveCursorToNextLine(token);\n      }\n    }\n  }\n\n  // After we reach the last token, add it to the word and finalize both buffers.\n  if (word.length > 0) {\n    positionWordBufferAtCursorAndAdvanceCursor();\n    addWordBufferToLineBuffer();\n  }\n  if (line.length > 0) {\n    addLineToListOfLines();\n  }\n\n  const collapsedWhitespace = collapseWhitespacesOnEndOfLines(allLines);\n  const alignedLines = alignLines(align, maxWidth, collapsedWhitespace);\n  const valignedLines = verticalAlignInLines(alignedLines, lineSpacing);\n\n  return valignedLines;\n};\n\nconst notEmptyString = (s: string) => s !== \"\";\n\nconst SPLIT_MARKER = `_🔪_`;\nexport const splitAroundWhitespace = (s: string): string[] =>\n  s\n    .replace(/\\s/g, `${SPLIT_MARKER}$&${SPLIT_MARKER}`)\n    .split(SPLIT_MARKER)\n    .filter((s) => s !== \"\");\n\nexport const splitText = (s: string, splitStyle: SplitStyle): string[] => {\n  if (splitStyle === \"words\") {\n    return [s].flatMap(splitAroundWhitespace).filter(notEmptyString);\n  } else if (splitStyle === \"characters\") {\n    return s.split(\"\");\n  } else {\n    // unsupported splitStyle.\n    let suggestion = ` Supported styles are \"words\" and \"characters\"`;\n    const badStyle = (splitStyle as string).toLowerCase();\n    if (badStyle.indexOf(\"char\") === 0) {\n      suggestion = `Did you mean \"characters\"?`;\n    } else if (badStyle.indexOf(\"wor\") === 0) {\n      suggestion = `Did you mean \"words\"?`;\n    }\n    throw new Error(`Unsupported split style \"${splitStyle}\". ${suggestion}`);\n  }\n};\n\nexport const calculateFinalTokens = (\n  styledTokens: StyledTokens,\n  splitStyle: SplitStyle = \"words\"\n): ParagraphToken => {\n  // Create a text field to use for measurements.\n  const sizer = new PixiText(\"\");\n  const defaultStyle = styledTokens.style;\n\n  let fontProperties: IFontMetrics;\n\n  const generateFinalTokenFromStyledToken =\n    (style: TextStyleExtended, tags: string) =>\n    (token: StyledToken | TextToken | SpriteToken): FinalToken[] => {\n      let output: FinalToken[] = [];\n\n      sizer.style = {\n        ...style,\n        // Override some styles for the purposes of sizing text.\n        wordWrap: false,\n        dropShadowBlur: 0,\n        dropShadowDistance: 0,\n        dropShadowAngle: 0,\n        dropShadow: false,\n      };\n\n      if (typeof token === \"string\") {\n        // split into pieces and convert into tokens.\n\n        const textSegments = splitText(token, splitStyle);\n\n        const textTokens = textSegments.map((str): FinalToken => {\n          switch (style.textTransform) {\n            case \"uppercase\":\n              sizer.text = str.toUpperCase();\n              break;\n            case \"lowercase\":\n              sizer.text = str.toLowerCase();\n              break;\n            case \"capitalize\":\n              sizer.text = capitalize(str);\n              break;\n            default:\n              sizer.text = str;\n          }\n\n          const sw = style.fontScaleWidth ?? 1.0;\n          const sh = style.fontScaleHeight ?? 1.0;\n          // clamp negative or NaN fontScales to 0\n          const scaleWidth = isNaN(sw) || sw < 0 ? 0.0 : sw;\n          const scaleHeight = isNaN(sh) || sh < 0 ? 0.0 : sh;\n\n          sizer.scale.set(scaleWidth, scaleHeight);\n\n          fontProperties = { ...getFontPropertiesOfText(sizer, true) };\n          fontProperties.ascent *= scaleHeight;\n          fontProperties.descent *= scaleHeight;\n          fontProperties.fontSize *= scaleHeight;\n\n          const bounds = rectFromContainer(sizer);\n\n          // Incorporate the size of the stroke into the size of the text.\n          const stroke = sizer.style.strokeThickness ?? 0;\n          if (stroke > 0) {\n            fontProperties.descent += stroke / 2;\n            fontProperties.ascent += stroke / 2;\n            fontProperties.fontSize =\n              fontProperties.ascent + fontProperties.descent;\n          }\n\n          const textDecorations = extractDecorations(\n            style,\n            bounds,\n            fontProperties\n          );\n\n          return {\n            content: str,\n            style,\n            tags,\n            bounds,\n            fontProperties,\n            textDecorations,\n          };\n        });\n\n        output = output.concat(textTokens);\n      } else if (token instanceof Sprite) {\n        const sprite = token;\n        const imgDisplay = style[IMG_DISPLAY_PROPERTY];\n        // const isBlockImage = imgDisplay === \"block\";\n        const isIcon = imgDisplay === \"icon\";\n        fontProperties = { ...getFontPropertiesOfText(sizer, true) };\n\n        if (isIcon) {\n          // Set to minimum of 1 to avoid devide by zero.\n          // if it's height is zero or one it probably hasn't loaded yet.\n          // It will get refreshed after it loads.\n          const h = Math.max(sprite.height, 1);\n\n          if (h > 1 && sprite.scale.y === 1) {\n            const ratio = (fontProperties.ascent / h) * ICON_SCALE_BASE;\n            sprite.scale.set(ratio);\n          }\n        }\n\n        // handle images\n        const bounds = rectFromContainer(sprite);\n        output.push({\n          content: sprite,\n          style,\n          tags,\n          bounds,\n          fontProperties,\n          textDecorations: undefined,\n        });\n      } else {\n        // token is a composite\n        const styledToken = token as StyledToken;\n        const { children } = styledToken;\n        // set tags and styles for children of this composite token.\n        const newStyle = styledToken.style;\n        const newTags = styledToken.tags;\n\n        if (newStyle === undefined) {\n          throw new Error(\n            `Expected to find a 'style' property on ${styledToken}`\n          );\n        }\n\n        output = output.concat(\n          children.flatMap(generateFinalTokenFromStyledToken(newStyle, newTags))\n        );\n      }\n      return output;\n    };\n\n  // when starting out, use the default style\n  const tags = \"\";\n  const style: TextStyleExtended = defaultStyle;\n\n  const finalTokens = styledTokens.children.flatMap(\n    generateFinalTokenFromStyledToken(style, tags)\n  );\n\n  const { wordWrap: ww, wordWrapWidth: www } = defaultStyle;\n  const hasWordWrapWidth =\n    www !== undefined && !isNaN(www as number) && (www as number) > 0;\n  const maxWidth =\n    ww && hasWordWrapWidth ? (www as number) : Number.POSITIVE_INFINITY;\n\n  const lineSpacing = defaultStyle.lineSpacing ?? 0;\n  const align = defaultStyle.align ?? \"left\";\n\n  return layout(finalTokens, maxWidth, lineSpacing, align);\n};\n","import { BaseTexture, Texture } from \"@pixi/core\";\nimport { Sprite } from \"@pixi/sprite\";\nimport { Text } from \"@pixi/text\";\nimport { Container, DisplayObject } from \"@pixi/display\";\nimport { Graphics } from \"@pixi/graphics\";\nimport \"@pixi/events\";\n\nimport { parseTagsNew, removeTags, EMOJI_TAG } from \"./tags\";\nimport {\n  TaggedTextOptions,\n  TextStyleSet,\n  TextStyleExtended,\n  TagWithAttributes,\n  AttributesList,\n  ImageMap,\n  ImageSourceMap,\n  IMG_REFERENCE_PROPERTY,\n  FinalToken,\n  isSpriteToken,\n  TextFinalToken,\n  isTextToken,\n  isNotWhitespaceToken,\n  isNewlineToken,\n  isWhitespaceToken,\n  Point,\n  ParagraphToken,\n  TextDecorationMetrics,\n  isSpriteSource,\n  isTextureSource,\n} from \"./types\";\nimport { capitalize } from \"./stringUtil\";\nimport { calculateFinalTokens, getBoundsNested } from \"./layout\";\nimport {\n  combineAllStyles,\n  DEFAULT_STYLE,\n  getStyleForTag as getStyleForTagExt,\n  mapTagsToStyles,\n} from \"./style\";\nimport { fontSizeStringToNumber } from \"./pixiUtils\";\n\nexport const DEFAULT_OPTIONS: TaggedTextOptions = {\n  debug: false,\n  debugConsole: false,\n  splitStyle: \"words\",\n  imgMap: {},\n  skipUpdates: false,\n  skipDraw: false,\n  drawWhitespace: false,\n  wrapEmoji: true,\n};\n\n// TODO: make customizable\nconst DEBUG = {\n  WORD_STROKE_COLOR: 0xffcccc, // #FCC\n  WORD_FILL_COLOR: 0xeeeeee, // #EEE\n  TEXT_FIELD_STROKE_COLOR: 0xff00ff, // #F0F\n  WHITESPACE_COLOR: 0xcccccc, // #CCC\n  WHITESPACE_STROKE_COLOR: 0xaaaaaa, // #AAA\n  BASELINE_COLOR: 0xffff99, // #FF9\n  LINE_COLOR: 0xffff00, // #FF0\n  OUTLINE_COLOR: 0xffcccc, // #FCC\n  OUTLINE_SHADOW_COLOR: 0x000000, // #000\n  TEXT_STYLE: {\n    fontFamily: \"courier\",\n    fontSize: 10,\n    fill: 0xffffff, // #FFF\n    dropShadow: true,\n  },\n};\nconst DEFAULT_STYLE_SET = { default: DEFAULT_STYLE };\n\nObject.freeze(DEFAULT_STYLE_SET);\nObject.freeze(DEFAULT_STYLE);\nexport default class TaggedText extends Sprite {\n  public static get defaultStyles(): TextStyleSet {\n    return DEFAULT_STYLE_SET;\n  }\n  public static get defaultOptions(): TaggedTextOptions {\n    return DEFAULT_OPTIONS;\n  }\n\n  // todo: allow setting options after the constructor is called. Make sure to call update()\n  /** Settings for the TaggedText component. */\n  private _options: TaggedTextOptions;\n  public get options(): TaggedTextOptions {\n    return this._options;\n  }\n\n  private _needsUpdate = true;\n  public get needsUpdate(): boolean {\n    return this._needsUpdate;\n  }\n  private _needsDraw = true;\n  public get needsDraw(): boolean {\n    return this._needsDraw;\n  }\n\n  private _tokens: ParagraphToken = [];\n  public get tokensFlat(): FinalToken[] {\n    return this._tokens.flat(3);\n  }\n  /**\n   * Tokens representing parsed out and styled tagged text. This is generated by update.\n   * They contain all the information needed to render the text fields and other children in your component.\n   */\n  public get tokens(): ParagraphToken {\n    return this._tokens;\n  }\n\n  private _text = \"\";\n  public get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Alternative implicit setter for text. Always uses default for skipUpdate.\n   */\n  public set text(text: string) {\n    this.setText(text);\n  }\n\n  /**\n   * Setter for text that allows you to override the default for skipping the update.\n   * @param text Text to add to component with (optional) tags.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the text.\n   * When true, setText() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public setText(text: string, skipUpdate?: boolean): void {\n    if (text === this._text && this._needsUpdate === false) {\n      return;\n    }\n    this._text = text;\n    this._needsUpdate = true;\n    this.updateIfShould(skipUpdate);\n  }\n\n  /**\n   * Returns the text content with all tags stripped out.\n   */\n  public get untaggedText(): string {\n    return removeTags(this.text);\n  }\n\n  private _tagStyles: TextStyleSet = {};\n  public get tagStyles(): TextStyleSet {\n    return this._tagStyles;\n  }\n\n  /**\n   * Alternative implicit setter for tagStyles. Always uses default for skipUpdate.\n   */\n  public set tagStyles(styles: TextStyleSet) {\n    this.setTagStyles(styles);\n  }\n\n  /**\n   * Setter for tagStyles.\n   * @param styles Object with strings for keys representing tag names, mapped to style objects.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the styles.\n   * When true, setTagStyles() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public setTagStyles(styles: TextStyleSet, skipUpdate?: boolean): void {\n    Object.entries(styles).forEach(([tag, style]) =>\n      this.setStyleForTag(tag, style, true)\n    );\n    // TODO: add a way to test for identical styles to prevent unnecessary updates.\n    this._needsUpdate = true;\n    this.updateIfShould(skipUpdate);\n  }\n\n  public getStyleForTag(\n    tag: string,\n    attributes: AttributesList = {}\n  ): TextStyleExtended | undefined {\n    return getStyleForTagExt(tag, this.tagStyles, attributes);\n  }\n\n  public getStyleForTags(tags: TagWithAttributes[]): TextStyleExtended {\n    const styles = tags.map(({ tagName, attributes }) =>\n      this.getStyleForTag(tagName, attributes)\n    );\n    return combineAllStyles(styles);\n  }\n\n  /**\n   * Set a style to be used by a single tag.\n   * @param tag Name of the tag to set style for\n   * @param styles Style object to assign to the tag.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the styles.\n   * When true, setStyleForTag() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public setStyleForTag(\n    tag: string,\n    styles: TextStyleExtended,\n    skipUpdate?: boolean\n  ): boolean {\n    this.tagStyles[tag] = styles;\n\n    // TODO: warn user when trying to set styles on a tag that doesn't support it...\n    // e.g. wordWrapWidth on a styel other than default.\n\n    // Override some settings on default styles.\n    if (tag === \"default\" && this.defaultStyle[IMG_REFERENCE_PROPERTY]) {\n      // prevents accidentally setting all text to images.\n      console.error(\n        `Style \"${IMG_REFERENCE_PROPERTY}\" can not be set on the \"default\" style because it will add images to EVERY tag!`\n      );\n      this.defaultStyle[IMG_REFERENCE_PROPERTY] = undefined;\n    }\n    // TODO: add a way to test for identical styles to prevent unnecessary updates.\n    this._needsUpdate = true;\n    this.updateIfShould(skipUpdate);\n\n    return true;\n  }\n  /**\n   * Removes a style associated with a tag. Note, inline attributes are not affected.\n   * @param tag Name of the tag to delete the style of.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the styles.\n   * When true, removeStylesForTag() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public removeStylesForTag(tag: string, skipUpdate?: boolean): boolean {\n    if (tag in this.tagStyles) {\n      delete this.tagStyles[tag];\n\n      this._needsUpdate = true;\n      this.updateIfShould(skipUpdate);\n\n      return true;\n    }\n    return false;\n  }\n\n  public get defaultStyle(): TextStyleExtended {\n    return this.tagStyles?.default;\n  }\n  /**\n   * Alternative implicit setter for defaultStyle. Always uses default for skipUpdate.\n   */\n  public set defaultStyle(defaultStyles: TextStyleExtended) {\n    this.setDefaultStyle(defaultStyles);\n  }\n  /**\n   * Setter for default styles. A shortcut to this.setStyleForTag(\"default\",...)\n   * @param styles A style object to use as the default styles for all text in the component.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the styles.\n   * When true, setDefaultStyle() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public setDefaultStyle(\n    defaultStyles: TextStyleExtended,\n    skipUpdate?: boolean\n  ): void {\n    this.setStyleForTag(\"default\", defaultStyles, skipUpdate);\n  }\n\n  // References to internal elements.\n  private _textFields: Text[] = [];\n  public get textFields(): Text[] {\n    return this._textFields;\n  }\n  private _sprites: Sprite[] = [];\n  public get sprites(): Sprite[] {\n    return this._sprites;\n  }\n  private _decorations: Graphics[] = [];\n  public get decorations(): Graphics[] {\n    return this._decorations;\n  }\n  private _spriteTemplates: ImageMap = {};\n  public get spriteTemplates(): ImageMap {\n    return this._spriteTemplates;\n  }\n  private _debugGraphics: Graphics | null = null;\n\n  // Containers for children\n  private _textContainer: Container;\n  public get textContainer(): Container {\n    return this._textContainer;\n  }\n\n  private _decorationContainer: Container;\n  public get decorationContainer(): Container {\n    return this._decorationContainer;\n  }\n\n  private _spriteContainer: Container;\n  public get spriteContainer(): Container {\n    return this._spriteContainer;\n  }\n  private _debugContainer: Container;\n  public get debugContainer(): Container {\n    return this._debugContainer;\n  }\n\n  constructor(\n    text = \"\",\n    tagStyles: TextStyleSet = {},\n    options: TaggedTextOptions = {},\n    texture?: Texture\n  ) {\n    super(texture);\n\n    this._textContainer = new Container();\n    this._spriteContainer = new Container();\n    this._decorationContainer = new Container();\n    this._debugContainer = new Container();\n\n    this.addChild(this._textContainer);\n    this.addChild(this._spriteContainer);\n    this.addChild(this._decorationContainer);\n    this.addChild(this._debugContainer);\n\n    this.resetChildren();\n\n    const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n    this._options = mergedOptions;\n\n    tagStyles = { default: {}, ...tagStyles };\n\n    if (this.options.wrapEmoji) {\n      tagStyles[EMOJI_TAG] = { fontFamily: \"sans-serif\" };\n    }\n    const mergedDefaultStyles = { ...DEFAULT_STYLE, ...tagStyles.default };\n    tagStyles.default = mergedDefaultStyles;\n    this.tagStyles = tagStyles;\n\n    if (this.options.imgMap) {\n      this.createSpriteTemplatesFromSourceMap(this.options.imgMap);\n    }\n\n    this.text = text;\n  }\n\n  /**\n   * Removes all PIXI children from this component's containers.\n   * Deletes references to sprites and text fields.\n   */\n  private resetChildren() {\n    this._debugContainer.removeChildren();\n    this._textContainer.removeChildren();\n    this._spriteContainer.removeChildren();\n    this._decorationContainer.removeChildren();\n\n    this._textFields = [];\n    this._sprites = [];\n    this._decorations = [];\n  }\n\n  /**\n   * Creates associations between string-based keys like \"img\" and\n   * image Sprite objects which are included in the text.\n   * @param imgMap\n   */\n  private createSpriteTemplatesFromSourceMap(imgMap: ImageSourceMap) {\n    this._spriteTemplates = {};\n\n    Object.entries(imgMap).forEach(([key, spriteSource]) => {\n      let sprite: Sprite;\n      if (spriteSource instanceof Sprite) {\n        sprite = spriteSource;\n      } else {\n        // if the entry is not a sprite, attempt to load the sprite as if it is a reference to the sprite source (e.g. an Image element, url, or texture).\n        if (isSpriteSource(spriteSource)) {\n          sprite = Sprite.from(spriteSource);\n        } else if (isTextureSource(spriteSource)) {\n          sprite = Sprite.from(Texture.from(spriteSource));\n        } else {\n          throw new TypeError(\n            `The spriteSource provided for key ${key} was not in a valid format. Please use a Sprite, Texture, BaseTexture, string, HTMLImageElement, HTMLVideoElement, HTMLCanvasElement, or SVGElement`\n          );\n        }\n      }\n      // Listen for changes to sprites (e.g. when they load.)\n      const texture = sprite.texture;\n      if (texture !== undefined) {\n        texture.baseTexture.addListener(\"update\", (baseTexture: BaseTexture) =>\n          this.onImageTextureUpdate(baseTexture)\n        );\n      }\n\n      this.spriteTemplates[key] = sprite;\n\n      // create a style for each of these by default.\n      const existingStyle = this.getStyleForTag(key) ?? {};\n      const style = { [IMG_REFERENCE_PROPERTY]: key, ...existingStyle };\n      this.setStyleForTag(key, style);\n    });\n  }\n\n  private onImageTextureUpdate(baseTexture: BaseTexture): void {\n    baseTexture;\n    this._needsUpdate = true;\n    this._needsDraw = true;\n    // const didUpdate = this.updateIfShould();\n    this.updateIfShould();\n\n    // this.dispactchEvent(new Event(\"imageUpdate\", texture));\n  }\n\n  /**\n   * Determines whether to call update based on the parameter and the options set then calls it or sets needsUpdate to true.\n   * @param forcedSkipUpdate This is the parameter provided to some functions that allow you to skip the update.\n   * It's factored in along with the defaults to figure out what to do.\n   */\n  private updateIfShould(forcedSkipUpdate?: boolean): boolean {\n    if (\n      forcedSkipUpdate === false ||\n      (forcedSkipUpdate === undefined && this.options.skipUpdates === false)\n    ) {\n      this.update();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Calculates styles, positioning, etc. of the text and styles and creates a\n   * set of objects that represent where each portion of text and image should\n   * be drawn.\n   * @param skipDraw *For advanced users* overrides default for redrawing the styles.\n   * When true, update() will skip the call to draw() (even if the default is false).\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public update(skipDraw?: boolean): ParagraphToken {\n    // Determine default style properties\n    const tagStyles = this.tagStyles;\n    const { splitStyle } = this.options;\n    const spriteTemplates = this.options.imgMap && this.spriteTemplates;\n    // const wordWrapWidth = this.defaultStyle.wordWrap\n    //   ? this.defaultStyle.wordWrapWidth\n    //   : Number.POSITIVE_INFINITY;\n    // const align = this.defaultStyle.align;\n    // const lineSpacing = this.defaultStyle.lineSpacing;\n\n    // Pre-process text.\n    // Parse tags in the text.\n    const tagTokensNew = parseTagsNew(\n      this.text,\n      Object.keys(this.tagStyles),\n      this.options.wrapEmoji\n    );\n    // Assign styles to each segment.\n    const styledTokens = mapTagsToStyles(\n      tagTokensNew,\n      tagStyles,\n      spriteTemplates\n    );\n    styledTokens;\n    // Measure font for each style\n    // Measure each segment\n    // Create the text segments, position and add them. (draw)\n    const newFinalTokens = calculateFinalTokens(styledTokens, splitStyle);\n\n    this._tokens = newFinalTokens;\n    this._needsDraw = true;\n\n    // Wait one frame to draw so that this doesn't happen multiple times in one frame.\n    // if (this.animationRequest) {\n    //   window.cancelAnimationFrame(this.animationRequest);\n    // }\n    // this.animationRequest = window.requestAnimationFrame(\n\n    this.drawIfShould(skipDraw);\n\n    if (this.options.debugConsole) {\n      console.log(this.toDebugString());\n    }\n\n    this._needsUpdate = false;\n\n    return newFinalTokens;\n  }\n\n  /**\n   * Determines whether to call draw() based on the parameter and the options set then calls it or sets needsDraw to true.\n   * @param forcedSkipDraw This is the parameter provided to some functions that allow you to skip the update.\n   * It's factored in along with the defaults to figure out what to do.\n   */\n  private drawIfShould(forcedSkipDraw?: boolean): boolean {\n    if (\n      forcedSkipDraw === false ||\n      (forcedSkipDraw === undefined && this.options.skipDraw === false)\n    ) {\n      this.draw();\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Create and position the display objects based on the tokens.\n   */\n  public draw(): void {\n    this.resetChildren();\n    const { drawWhitespace } = this.options;\n    const tokens = drawWhitespace\n      ? this.tokensFlat\n      : // remove any tokens that are purely whitespace unless drawWhitespace is specified\n        this.tokensFlat.filter(isNotWhitespaceToken);\n\n    let drewDecorations = false;\n    let displayObject: DisplayObject;\n\n    tokens.forEach((t) => {\n      if (isTextToken(t)) {\n        displayObject = this.createTextFieldForToken(t as TextFinalToken);\n        this.textContainer.addChild(displayObject);\n        this.textFields.push(displayObject as Text);\n\n        if (t.textDecorations && t.textDecorations.length > 0) {\n          for (const d of t.textDecorations) {\n            const drawing = this.createDrawingForTextDecoration(d);\n            (displayObject as Text).addChild(drawing);\n            this._decorations.push(drawing);\n          }\n          drewDecorations = true;\n        }\n      }\n      if (isSpriteToken(t)) {\n        displayObject = t.content as Sprite;\n        this.sprites.push(displayObject as Sprite);\n        this.spriteContainer.addChild(displayObject);\n      }\n\n      const { bounds } = t;\n      displayObject.x = bounds.x;\n      displayObject.y = bounds.y;\n    });\n\n    if (drawWhitespace === false && drewDecorations) {\n      console.warn(\n        \"Warning: you may want to set the `drawWhitespace` option to `true` when using textDecoration (e.g. underlines) otherwise, spaces will not have text decorations.\"\n      );\n    }\n\n    if (this.options.debug) {\n      this.drawDebug();\n    }\n    this._needsDraw = false;\n  }\n\n  private createDrawingForTextDecoration(\n    textDecoration: TextDecorationMetrics\n  ): Graphics {\n    const { bounds } = textDecoration;\n    let { color } = textDecoration;\n    const drawing = new Graphics();\n\n    if (typeof color === \"string\") {\n      if (color.indexOf(\"#\") === 0) {\n        color = \"0x\" + color.substring(1);\n        color = parseInt(color, 16) as number;\n      } else {\n        throw new Error(\n          \"Sorry, at this point, only hex colors are supported for textDecorations like underlines. Please use either a hex number like 0x66FF33 or a string like '#66FF33'\"\n        );\n      }\n    }\n\n    drawing\n      .beginFill(color as number)\n      .drawRect(bounds.x, bounds.y, bounds.width, bounds.height)\n      .endFill();\n\n    return drawing;\n  }\n\n  private createTextFieldForToken(token: TextFinalToken): Text {\n    const { textTransform = \"\" } = token.style;\n\n    let text = token.content;\n    switch (textTransform.toLowerCase()) {\n      case \"lowercase\":\n        text = text.toLowerCase();\n        break;\n      case \"uppercase\":\n        text = text.toUpperCase();\n        break;\n      case \"capitalize\":\n        text = capitalize(text);\n        break;\n      default:\n    }\n\n    const textField = new Text(text, token.style);\n\n    let { fontScaleWidth = 1.0, fontScaleHeight = 1.0 } = token.style;\n    fontScaleWidth =\n      isNaN(fontScaleWidth) || fontScaleWidth < 0 ? 0 : fontScaleWidth;\n    fontScaleHeight =\n      isNaN(fontScaleHeight) || fontScaleHeight < 0 ? 0 : fontScaleHeight;\n\n    let finalScaleWidth = fontScaleWidth;\n    let finalScaleHeight = fontScaleHeight;\n    const largerScale = Math.max(fontScaleWidth, fontScaleHeight);\n\n    if (largerScale > 1) {\n      if (largerScale === fontScaleHeight) {\n        finalScaleWidth /= largerScale;\n        finalScaleHeight = 1.0;\n      } else {\n        finalScaleHeight /= largerScale;\n        finalScaleWidth = 1.0;\n      }\n\n      const fs = textField.style.fontSize ?? 0;\n      const fontSizePx =\n        (typeof fs === \"string\" ? fontSizeStringToNumber(fs) : fs) *\n        largerScale;\n\n      textField.style.fontSize = fontSizePx;\n    }\n\n    textField.scale.set(finalScaleWidth, finalScaleHeight);\n    return textField;\n  }\n\n  /**\n   * Converts the text properties from this.tokens into a human readable string.\n   * This is automatically logged to the console on update when debug option is set to true.\n   */\n  public toDebugString(): string {\n    const lines = this.tokens;\n    let s = this.untaggedText + \"\\n=====\\n\";\n    const nl = \"\\n    \";\n    if (lines !== undefined) {\n      s += lines.map((line, lineNumber) =>\n        line.map((word, wordNumber) =>\n          word\n            .map((token, tokenNumber) => {\n              let text = \"\";\n              if (isTextToken(token)) {\n                if (isNewlineToken(token)) {\n                  text = `\\\\n`;\n                } else {\n                  text = `\"${token.content}\"`;\n                }\n              } else if (isSpriteToken(token)) {\n                text = `[Image]`;\n              }\n              let s = `\\n${text}: (${lineNumber}/${wordNumber}/${tokenNumber})`;\n              s += `${nl}tags: ${\n                token.tags.length === 0\n                  ? \"<none>\"\n                  : token.tags\n                      .split(\",\")\n                      .map((tag) => `<${tag}>`)\n                      .join(\", \")\n              }`;\n              s += `${nl}style: ${Object.entries(token.style)\n                .map((e) => e.join(\":\"))\n                .join(\"; \")}`;\n              s += `${nl}size: x:${token.bounds.x} y:${token.bounds.y} width:${\n                token.bounds.width\n              } height:${token.bounds.height} bottom:${\n                token.bounds.height + token.bounds.y\n              } right:${token.bounds.x + token.bounds.width}`;\n              s += `${nl}font: fontSize:${token.fontProperties.fontSize} ascent:${token.fontProperties.ascent} descent:${token.fontProperties.descent}`;\n              return s;\n            })\n            .join(\"\\n\")\n        )\n      );\n    }\n    return s;\n  }\n\n  public drawDebug(): void {\n    const paragraph = this.tokens;\n    this._debugGraphics = new Graphics();\n    this.debugContainer.addChild(this._debugGraphics);\n\n    const g = this._debugGraphics;\n    g.clear();\n\n    // const { width, height } = this.getBounds();\n    // // frame shadow\n    // g.lineStyle(2, DEBUG.OUTLINE_SHADOW_COLOR, 0.5);\n    // // g.beginFill();\n    // g.drawRect(1, 1, width, height);\n    // // g.endFill();\n\n    // // frame\n    // g.lineStyle(2, DEBUG.OUTLINE_COLOR, 1);\n    // // g.beginFill();\n    // g.drawRect(0, 0, width - 1, height - 1);\n    // // g.endFill();\n\n    function createInfoText(text: string, position: Point): Text {\n      const info = new Text(text, DEBUG.TEXT_STYLE);\n      info.x = position.x + 1;\n      info.y = position.y + 1;\n      return info;\n    }\n\n    // for (const line of tokens) {\n    for (let lineNumber = 0; lineNumber < paragraph.length; lineNumber++) {\n      const line = paragraph[lineNumber];\n      const lineBounds = getBoundsNested(line);\n\n      if (this.defaultStyle.wordWrap) {\n        const w = this.defaultStyle.wordWrapWidth ?? this.width;\n        g.endFill()\n          .lineStyle(0.5, DEBUG.LINE_COLOR, 0.2)\n          .drawRect(0, lineBounds.y, w, lineBounds.height)\n          .endFill();\n      }\n\n      for (let wordNumber = 0; wordNumber < line.length; wordNumber++) {\n        const word = line[wordNumber];\n        for (const segmentToken of word) {\n          const isSprite = isSpriteToken(segmentToken);\n          const { x, y, width } = segmentToken.bounds;\n          const baseline =\n            y +\n            (isSprite\n              ? segmentToken.bounds.height\n              : segmentToken.fontProperties.ascent);\n\n          let { height } = segmentToken.bounds;\n          if (isSprite) {\n            height += segmentToken.fontProperties.descent;\n          }\n\n          if (\n            isWhitespaceToken(segmentToken) &&\n            this.options.drawWhitespace === false\n          ) {\n            g.lineStyle(1, DEBUG.WHITESPACE_STROKE_COLOR, 1).beginFill(\n              DEBUG.WHITESPACE_COLOR,\n              0.2\n            );\n          } else {\n            g.lineStyle(1, DEBUG.WORD_STROKE_COLOR, 1).beginFill(\n              DEBUG.WORD_FILL_COLOR,\n              0.2\n            );\n          }\n\n          if (isNewlineToken(segmentToken)) {\n            this.debugContainer.addChild(\n              createInfoText(\"↩︎\", { x, y: y + 10 })\n            );\n          } else {\n            g.lineStyle(0.5, DEBUG.LINE_COLOR, 0.2)\n              .drawRect(x, y, width, height)\n              .endFill()\n\n              .lineStyle(1, DEBUG.BASELINE_COLOR, 1)\n              .beginFill()\n              .drawRect(x, baseline, width, 1)\n              .endFill();\n          }\n\n          let info;\n          // info = `${token.bounds.width}⨉${token.bounds.height}`;\n          if (isTextToken(segmentToken)) {\n            // info += ` ${token.tags}`;\n            info = `${segmentToken.tags}`;\n            this.debugContainer.addChild(createInfoText(info, { x, y }));\n          }\n          // this.debugContainer.addChild(createInfoText(info, { x, y }));\n        }\n      }\n    }\n    // }\n\n    // Show the outlines of the actual text fields,\n    // not just where the tokens say they should be\n    // const fields: Text[] = this.textFields;\n    // for (const text of fields) {\n    //   g.lineStyle(1, DEBUG.TEXT_FIELD_STROKE_COLOR, 1);\n    //   g.drawRect(text.x, text.y, text.width, text.height);\n    // }\n  }\n}\n"],"names":["predicate","group","any","combineRecords","a","b","last","length","isDefined","undefined","flatReduce","f","acc","nested","flat","reduce","flatEvery","p","t","createEmptyFinalToken","content","bounds","PixiRectangle","fontProperties","ascent","descent","fontSize","style","tags","textDecorations","isWhitespace","s","split","every","char","search","isSpriteToken","Sprite","_isTextToken","isTextToken","isWhitespaceToken","_isNewlineToken","isNewlineToken","isNotWhitespaceToken","input","isEmptyObject","Object","keys","getTagRegex","tagNamesToMatch","matchingTagNames","join","captureGroup","noCaptureGroup","QUOTE","NOT_QUOTE","TAG_NAMES","ATTRIBUTE_VALUE","ATTRIBUTES","WHITESPACE","CHAR","RegExp","TAG_OPEN","createTagMatchData","match","attributesString","openTagName","index","tag","tagName","isOpening","attributes","trim","obj","attribute","attributePair","name","valueStr","substr","selfClosingTagSearch","not","TAG_SLASH","tagMatchToTagToken","children","capitalize","str","chars","converted","i","charAt","toUpperCase","measureFont","context","TextMetrics","font","getFontPropertiesOfText","textField","forceUpdate","updateText","props","isNaN","Error","DEFAULT_STYLE","align","valign","wordWrap","wordWrapWidth","lineSpacing","fill","combineStyles","combineAllStyles","styles","filter","getStyleForTag","tagStyles","convertedAttributes","key","value","parseFloat","convertAttributeValues","injectAttributes","rectFromContainer","container","offset","x","y","Rectangle","width","height","translateLine","line","map","point","translatePoint","lineWidth","wordsInLine","firstWord","lastWord","setBoundsX","object","positionWordX","word","prevBounds","token","concatBounds","originalBounds","NaN","Math","min","max","getBoundsNested","alignLeft","newLine","concat","getTallestToken","tallest","current","h","notEmptyString","splitAroundWhitespace","replace","SPLIT_MARKER","DEFAULT_OPTIONS","debug","debugConsole","splitStyle","imgMap","skipUpdates","skipDraw","drawWhitespace","wrapEmoji","DEBUG","fontFamily","dropShadow","DEFAULT_STYLE_SET","default","freeze","TaggedText","text","options","texture","_this","_options","_needsUpdate","_needsDraw","_tokens","_text","_tagStyles","_textFields","_sprites","_decorations","_spriteTemplates","_debugGraphics","_textContainer","_decorationContainer","_spriteContainer","_debugContainer","Container","addChild","resetChildren","mergedOptions","mergedDefaultStyles","createSpriteTemplatesFromSourceMap","setText","skipUpdate","this","updateIfShould","setTagStyles","entries","forEach","_this2","setStyleForTag","getStyleForTagExt","getStyleForTags","_this3","defaultStyle","console","error","removeStylesForTag","setDefaultStyle","defaultStyles","removeChildren","sprite","spriteSource","Texture","HTMLCanvasElement","HTMLVideoElement","from","HTMLImageElement","BaseTexture","isTextureSource","TypeError","baseTexture","addListener","_this4","onImageTextureUpdate","spriteTemplates","existingStyle","forcedSkipUpdate","update","styledTokens","tokens","tagStack","styleCache","convertTagTokenToStyledToken","objects","push","o","tagHash","JSON","stringify","tagWithAttributesToStyle","stylesWithDefault","textDecoration","defaultColor","decorationColor","defaultThickness","decorationThickness","mergeDecoration","decorationLineType","decorationLineTypeCamelCase","_style$textDecoration","includes","convertDecorationToLineProps","styledToken","imgKey","cloneOfSprite","cloneSprite","pop","mapTagsToStyles","shouldWrapEmoji","getEmojiRegex","test","containsEmoji","emojiRegex","source","replaceAll","tagStart","_","output","replaceSelfClosingTags","re","tagMatches","exec","tagMatch","segments","tagMatchData","remaining","startOfTag","endOfTag","segment","extractSegments","rootTokens","tokenStack","poppedToken","warn","createTokensNew","parseTagsNew","newFinalTokens","sizer","PixiText","finalTokens","flatMap","generateFinalTokenFromStyledToken","dropShadowBlur","dropShadowDistance","dropShadowAngle","textSegments","suggestion","badStyle","toLowerCase","indexOf","splitText","textTokens","textTransform","sw","fontScaleWidth","sh","fontScaleHeight","scaleWidth","scaleHeight","scale","set","stroke","strokeThickness","textBounds","baseline","ascender","xHeight","color","extractDecorations","isIcon","newStyle","newTags","ww","www","hasWordWrapWidth","maxWidth","cursor","wordWidth","allLines","tallestHeightInLine","addWordBufferToLineBuffer","addLineToListOfLines","addLineToListOfLinesAndMoveCursorToNextLine","setTallestHeight","_token$fontProperties2","_token$bounds","positionTokenAtCursorAndAdvanceCursor","positionWordBufferAtCursorAndAdvanceCursor","isBlockImage","addTokenToWordAndUpdateWordWidth","isNewline","isImage","collapsedWhitespace","lines","collapseWhitespacesOnEndOfLines","valignedLines","overrideValign","previousTallestToken","previousLineBottom","newLines","tallestToken","tallestHeight","_tallestToken$bounds","tallestAscent","_tallestToken$fontPro2","newWord","newToken","newBounds","newY","verticalAlignInLines","alignFunction","maxLineWidth","alignRight","alignCenter","nonZeroWidthWords","countNonZeroWidthWords","first","rest","previousWord","result","combinedBounds","getCombinedBounds","spacerWidth","wordBoundsForLine","wordBounds","alignedLine","alignLines","layout","Number","POSITIVE_INFINITY","calculateFinalTokens","drawIfShould","log","toDebugString","forcedSkipDraw","draw","displayObject","tokensFlat","drewDecorations","_this5","createTextFieldForToken","textContainer","textFields","drawing","createDrawingForTextDecoration","sprites","spriteContainer","drawDebug","Graphics","substring","parseInt","beginFill","drawRect","endFill","Text","finalScaleWidth","finalScaleHeight","largerScale","fs","fontSizePx","size","unit","fontSizeStringToNumber","untaggedText","nl","lineNumber","wordNumber","tokenNumber","e","paragraph","debugContainer","g","createInfoText","position","info","clear","lineBounds","w","lineStyle","segmentToken","isSprite","_this$tagStyles"],"mappings":"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"}